// henon attractor
// a.pngに出力

import java.awt.*
import java.awt.image.*
import javax.imageio.*
import java.io.*

def createPictureFile(int imgWidth , int imgHeight , String imgType , String fileName , Closure op) {
	def bi  = new BufferedImage(imgWidth,imgHeight,BufferedImage.TYPE_BYTE_GRAY)
	def g = bi.createGraphics()
	g.setPaint(Color.WHITE)
	g.fillRect(0,0,imgWidth,imgHeight)
	g.setColor(Color.BLACK)
	op(g)
	def outFile	= new File(fileName)
	ImageIO.write(bi,imgType,outFile)
}

class Point {
	double x = 0.0
	double y = 0.0
	Point(){}
	Point( x , y ){
		this.x = x
		this.y = y
	}
}

// from : http://codezine.jp/article/detail/327?p=2

h_sq ={it*it}
h_cu ={it*it*it}
h_si ={0.8*Math.sin(it)}
h_in ={0.1 / it}

henon = h_sq
alpha = 0.47 * Math.PI
// 0.07
// 0.30
// 0.39
// 0.47
// 0.61
// 0.84
sin_alpha = Math.sin(alpha)
cos_alpha = Math.cos(alpha)

num_trajectory           = 100
num_point_per_trajectory = 1000

ratio     = 300.0
imgWidth  = 500
imgHeight = 500
offsetx   = imgWidth /2
offsety   = imgHeight/2
imgType   = "png"
fileName  = "a.png"

oval_r    = 1.0
num_ring  = 15

limitPositive = 10e6
limitNegative =-limitPositive

createPictureFile(imgWidth , imgHeight , imgType , fileName) { Graphics2D g ->
	rand = new java.util.Random()
	for (j in 0..num_trajectory){
		iring = (j % num_ring) + 1 
		r     = (oval_r * iring)/num_ring
		theta = rand.nextDouble() * Math.PI * 2
		//
		pt = new Point( r*Math.cos( theta ) , r*Math.sin( theta ) )
		//
		for (i in 0..num_point_per_trajectory){
			x  = pt.x
			y  = pt.y
			
			if ( limitNegative > x || limitPositive < x  || limitNegative > y || limitPositive < y )
				break
			
			int ix =               ratio*x + offsetx
			int iy = imgHeight - ( ratio*y + offsety )
			g.drawLine(ix,iy,ix,iy)
			
			temp  = y - henon(x)
			pt.x = x*cos_alpha - temp*sin_alpha  
			pt.y = x*sin_alpha + temp*cos_alpha 
			
		}
		//
	}
}

